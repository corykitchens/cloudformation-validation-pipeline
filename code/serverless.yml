service: cfnpipeline

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.6
  region: us-west-2
  stackName: CfValidationPipeline
  stage: 'production'
  

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

functions:
  lint_template:
    handler: lint_template/lint_template.lambda_handler
    role: LintTemplateRole
  validate_template:
    handler: validate_template/validate_template.lambda_handler
    role: ValidateTemplateRole
  required_tags:
    handler: required_tags/tags.lambda_handler
    role: ValidateTemplateRole

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
resources:
  Resources:
    ValidateTemplateRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
        Path: "/"
        Policies:
        - PolicyName: ValidateTemplateRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource:
              - Fn::Sub: "*"
            - Effect: Allow
              Action:
              - codepipeline:GetPipeline
              - codepipeline:GetPipelineExecution
              - codepipeline:GetPipelineState
              - codepipeline:ListPipelines
              Resource:
              - Fn::Sub: "*"
            - Effect: Allow
              Action:
              - codepipeline:GetJobDetails
              - codepipeline:PutJobSuccessResult
              - codepipeline:PutJobFailureResult
              Resource: "*"
            - Effect: Allow
              Action:
              - s3:GetObject
              - s3:PutObject
              Resource: "*"
            - Effect: Allow
              Action:
              - cloudformation:ValidateTemplate
              Resource: "*"
    LintTemplateRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
        Path: "/"
        Policies:
        - PolicyName: LintTemplateRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource:
              - Fn::Join:
                - ''
                - - 'arn:aws:logs:'
                  - Ref: 'AWS::Region'
                  - ":"
                  - Ref: 'AWS::AccountId'
                  - ":log-group:/aws/lambda/*"
            - Effect: Allow
              Action:
              - codepipeline:GetPipeline
              - codepipeline:GetPipelineExecution
              - codepipeline:GetPipelineState
              - codepipeline:ListPipelines
              Resource:
              # - Fn::Sub: arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:*
              - "*"
            - Effect: Allow
              Action:
              - codepipeline:GetJobDetails
              - codepipeline:PutJobSuccessResult
              - codepipeline:PutJobFailureResult
              Resource: "*"
            - Effect: Allow
              Action:
              - s3:GetObject
              - s3:PutObject
              Resource: "*"
            - Effect: Allow
              Action:
              - codebuild:startbuild
              - codebuild:BatchGetBuilds
              Resource:
                "*"
                # Fn::Sub: arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/CFN-Lint-*
plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: non-linux