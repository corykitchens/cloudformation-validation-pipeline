service: cfnpipeline
provider:
  name: aws
  runtime: python3.6
  region: us-west-2
  stackName: CfValidationPipeline
  stage: 'production'
functions:
  LintTemplateLambda:
    handler: lint_template/lint_template.lambda_handler
    role: LintTemplateRole
  ValidateTemplateLambda:
    handler: validate_template/validate_template.lambda_handler
    role: ValidateTemplateRole
  RequiredTags:
    handler: required_tags/tags.lambda_handler
    role: ValidateTemplateRole
resources:
  Resources:
    ValidateTemplateRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
        Path: "/"
        Policies:
        - PolicyName: ValidateTemplateRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource:
              - Fn::Sub: "*"
            - Effect: Allow
              Action:
              - codepipeline:GetPipeline
              - codepipeline:GetPipelineExecution
              - codepipeline:GetPipelineState
              - codepipeline:ListPipelines
              Resource:
              - Fn::Sub: "*"
            - Effect: Allow
              Action:
              - codepipeline:GetJobDetails
              - codepipeline:PutJobSuccessResult
              - codepipeline:PutJobFailureResult
              Resource: "*"
            - Effect: Allow
              Action:
              - s3:GetObject
              - s3:PutObject
              Resource: "*"
            - Effect: Allow
              Action:
              - cloudformation:ValidateTemplate
              Resource: "*"
    LintTemplateRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
        Path: "/"
        Policies:
        - PolicyName: LintTemplateRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource:
              - Fn::Join:
                - ''
                - - 'arn:aws:logs:'
                  - Ref: 'AWS::Region'
                  - ":"
                  - Ref: 'AWS::AccountId'
                  - ":log-group:/aws/lambda/*"
            - Effect: Allow
              Action:
              - codepipeline:GetPipeline
              - codepipeline:GetPipelineExecution
              - codepipeline:GetPipelineState
              - codepipeline:ListPipelines
              Resource:
              # - Fn::Sub: arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:*
              - "*"
            - Effect: Allow
              Action:
              - codepipeline:GetJobDetails
              - codepipeline:PutJobSuccessResult
              - codepipeline:PutJobFailureResult
              Resource: "*"
            - Effect: Allow
              Action:
              - s3:GetObject
              - s3:PutObject
              Resource: "*"
            - Effect: Allow
              Action:
              - codebuild:startbuild
              - codebuild:BatchGetBuilds
              Resource:
                "*"
                # Fn::Sub: arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/CFN-Lint-*
    GenerateReportRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
        Path: "/"
        Policies:
        - PolicyName: GenerateReportRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:FilterLogEvents
              Resource:
              - Fn::Join:
                - ''
                - - 'arn:aws:logs:'
                  - Ref: 'AWS::Region'
                  - ":"
                  - Ref: 'AWS::AccountId'
                  - ":log-group:/aws/lambda/*"
            - Effect: Allow
              Action:
              - codepipeline:GetPipeline
              - codepipeline:GetPipelineExecution
              - codepipeline:GetPipelineState
              - codepipeline:ListPipelines
              Resource:
              - Fn::Join:
                - ''
                - - 'arn:aws:codepipeline:'
                - - Ref: 'AWS::Region'
                - - ":"
                - - Ref: 'AWS::AccountId'
                - - "*"
            - Effect: Allow
              Action:
              - codepipeline:GetJobDetails
              - codepipeline:PutJobSuccessResult
              - codepipeline:PutJobFailureResult
              Resource: "*"
            - Effect: Allow
              Action:
              - s3:GetObject
              - s3:PutObject
              Resource: "*"
            - Action:
              - sns:Publish
              Resource: "*"
              Effect: Allow
    DeployToS3Role:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
        Path: "/"
        Policies:
        - PolicyName: DeployToS3Role
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource:
              - Fn::Join:
                - ''
                - - 'arn:aws:logs:'
                  - Ref: 'AWS::Region'
                  - ":"
                  - Ref: 'AWS::AccountId'
                  - ":log-group:/aws/lambda/*"
            - Effect: Allow
              Action:
              - codepipeline:GetPipeline
              - codepipeline:GetPipelineExecution
              - codepipeline:GetPipelineState
              - codepipeline:ListPipelines
              Resource:
              - Fn::Join:
                - ''
                - - 'arn:aws:codepipeline:'
                - - Ref: 'AWS::Region'
                - - ":"
                - - Ref: 'AWS::AccountId'
                - - "*"
            - Effect: Allow
              Action:
              - codepipeline:GetJobDetails
              - codepipeline:PutJobSuccessResult
              - codepipeline:PutJobFailureResult
              Resource: "*"
            - Effect: Allow
              Action:
              - s3:*
              Resource: "*"
    SubnetNameRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
        Path: "/"
        Policies:
        - PolicyName: SubnetNameRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource:
              - Fn::Join:
                - ''
                - - 'arn:aws:logs:'
                  - Ref: 'AWS::Region'
                  - ":"
                  - Ref: 'AWS::AccountId'
                  - ":log-group:/aws/lambda/*"
            - Effect: Allow
              Action:
              - codepipeline:GetPipeline
              - codepipeline:GetPipelineExecution
              - codepipeline:GetPipelineState
              - codepipeline:ListPipelines
              Resource:
              - Fn::Join:
                - ''
                - - 'arn:aws:codepipeline:'
                - - Ref: 'AWS::Region'
                - - ":"
                - - Ref: 'AWS::AccountId'
                - - "*"
            - Effect: Allow
              Action:
              - codepipeline:GetJobDetails
              - codepipeline:PutJobSuccessResult
              - codepipeline:PutJobFailureResult
              Resource: "*"
            - Effect: Allow
              Action:
              - s3:GetObject
              Resource: "*"
            - Effect: Allow
              Action:
              - ec2:DescribeSubnets
              Resource: "*"
            - Effect: Allow
              Action:
              - cloudformation:DescribeStackResources
              - cloudformation:ListStackResources
              Resource:
                - Fn::Join:
                  - ''
                  - - 'arn:aws:cloudformation:'
                  - - "*:"
                  - - Ref: 'AWS::AccountId'
                  - - ":"
                  - - "stack/ci-*"
            - Effect: Allow
              Action:
              - cloudformation:DescribeStacks
              Resource: "*"
    TestConnectivityRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
        Path: "/"
        Policies:
        - PolicyName: TestConnectivityRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource:
              - Fn::Join:
                - ''
                - - 'arn:aws:logs:'
                - - ":"
                - - Ref: 'AWS::Region'
                - - ":"
                - - Ref: 'AWS::AccountId'
                - - ":"
                - - log-group:/aws/lambda/*"
            - Effect: Allow
              Action:
              - codepipeline:GetPipeline
              - codepipeline:GetPipelineExecution
              - codepipeline:GetPipelineState
              - codepipeline:ListPipelines
              Resource:
              - Fn::Join:
                - ''
                - - 'arn:aws:codepipeline:'
                - - Ref: 'AWS::Region'
                - - ":"
                - - Ref: 'AWS::AccountId'
                - - "*"
            - Effect: Allow
              Action:
              - codepipeline:GetJobDetails
              - codepipeline:PutJobSuccessResult
              - codepipeline:PutJobFailureResult
              Resource: "*"
            - Effect: Allow
              Action:
              - s3:GetObject
              Resource: "*"
            - Effect: Allow
              Action:
              - iam:GetRole
              - iam:CreateRole
              - iam:PutRolePolicy
              - iam:DeleteRole
              - iam:DeleteRolePolicy
              - iam:PassRole
              Resource:
                - Fn::Join:
                  - ''
                  - - 'arn:aws:iam?:'
                  - - Ref: 'AWS::AccountId'
                  - - ":/role/test_subnet_*"
            - Effect: Allow
              Action:
              - ec2:DescribeSubnets
              - ec2:CreateSecurityGroup
              - ec2:DescribeNetworkInterfaces
              - ec2:DetachNetworkInterface
              - ec2:DeleteNetworkInterface
              - ec2:DeleteSecurityGroup
              - ec2:DescribeSecurityGroups
              - ec2:DescribeVpcs
              Resource: "*"
            - Effect: Allow
              Action:
              - lambda:CreateFunction
              Resource: "*"
            - Effect: Allow
              Action:
              - lambda:InvokeFunction
              - lambda:DeleteFunction
              Resource:
                - Fn::Join:
                  - ''
                  - - 'arn:aws:lambda:*:'
                  - - Ref: 'AWS::AccountId'
                  - - ":function:test_subnet_*"
            - Effect: Allow
              Action:
              - cloudformation:DescribeStackResources
              - cloudformation:ListStackResources
              Resource:
                - "*"
              # - Fn::Sub: arn:aws:cloudformation:*:${AWS::AccountId}:stack/ci-*
              # - Fn::Sub: arn:aws:cloudformation:*:${AWS::AccountId}:stack/SC-${AWS::AccountId}-pp-*
            - Effect: Allow
              Action:
              - cloudformation:DescribeStacks
              Resource: "*"
    CreateStacksRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
        Path: "/"
        Policies:
        - PolicyName: CreateStacksRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource:
              - Fn::Join:
                - ''
                - - 'arn:aws:logs:'
                  - Ref: 'AWS::Region'
                  - ":"
                  - Ref: 'AWS::AccountId'
                  - ":log-group:/aws/lambda/*"
            - Effect: Allow
              Action:
              - codepipeline:GetPipeline
              - codepipeline:GetPipelineExecution
              - codepipeline:GetPipelineState
              - codepipeline:ListPipelines
              Resource:
              - Fn::Join:
                - ''
                - - 'arn:aws:codepipeline:'
                - - Ref: 'AWS::Region'
                - - ":"
                - - Ref: 'AWS::AccountId'
                - - "*"
            - Effect: Allow
              Action:
              - codepipeline:GetJobDetails
              - codepipeline:PutJobSuccessResult
              - codepipeline:PutJobFailureResult
              Resource: "*"
            - Effect: Allow
              Action:
              - s3:GetObject
              - s3:PutObject
              Resource: "*"
            - Effect: Allow
              Action:
              - ec2:DescribeRegions
              - ec2:CreateKeyPair
              - ec2:DescribeAvailabilityZones
              Resource: "*"
            - Effect: Allow
              Action:
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStackEvents
              - cloudformation:ListStackResources
              Resource:
              - Fn::Join:
                - ''
                - - 'arn:aws:cloudformation:'
                - - "*:"
                - - Ref: 'AWS::AccountId'
                - - ":"
                - - "stack/ci-*"
            - Effect: Allow
              Action:
              - cloudformation:DescribeStacks
              - cloudformation:ListStacks
              Resource: "*"
            - Effect: Allow
              Action:
              - iam:PassRole
              Resource:
              - Ref: StackCreationRoleArn
    AMICheckRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
        Path: "/"
        Policies:
        - PolicyName: AMICheckRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource:
              - Fn::Join:
                - ''
                - - 'arn:aws:logs:'
                  - Ref: 'AWS::Region'
                  - ":"
                  - Ref: 'AWS::AccountId'
                  - ":log-group:/aws/lambda/*"
            - Effect: Allow
              Action:
              - codepipeline:GetPipeline
              - codepipeline:GetPipelineExecution
              - codepipeline:GetPipelineState
              - codepipeline:ListPipelines
              Resource:
              - Fn::Join:
                - ''
                - - 'arn:aws:codepipeline:'
                - - Ref: 'AWS::Region'
                - - Ref: "*"
                - - Ref: 'AWS::AccountId'
                - - ":*"
            - Effect: Allow
              Action:
              - codepipeline:GetJobDetails
              - codepipeline:PutJobSuccessResult
              - codepipeline:PutJobFailureResult
              Resource: "*"
            - Effect: Allow
              Action:
              - s3:GetObject
              Resource: "*"
            - Effect: Allow
              Action:
              - ec2:DescribeRegions
              - ec2:DescribeImages
              Resource: "*"
  Outputs:
    # DeployToS3LambdaName:
    #   Value:
    #     Ref: DeployToS3Lambda
    #   Export:
    #     Name: DeployToS3LambdaName
    # GenerateReportLambdaName:
    #   Value:
    #     Ref: GenerateReportLambda
    #   Export:
    #     Name: GenerateReportLambdaName
    # CreateStacksLambdaName:
    #   Value:
    #     Ref: CreateStacksLambda
    #   Export:
    #     Name: CreateStacksLambdaName
    # AMICheckLambdaName:
    #   Value:
    #     Ref: AMICheckLambda
    #   Export:
    #     Name: AMICheckLambdaName
    # LintTemplateLambdaName:
    #   Value:
    #     Ref: LintTemplateLambda
    #   Export:
    #     Name: LintTemplateLambdaName
    ValidateTemplateLambdaName:
      Value:
        Ref: ValidateTemplateLambda
      Export:
        Name: ValidateTemplateLambdaName
    # TestConnectivityLambdaName:
    #   Value:
    #     Ref: TestConnectivityLambda
    #   Export:
    #     Name: TestConnectivityLambdaName
    # SubnetNameLambdaName:
    #   Value:
    #     Ref: SubnetNameLambda
    #   Export:
    #     Name: SubnetNameLambdaName

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: non-linux